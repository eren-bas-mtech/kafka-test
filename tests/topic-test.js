const KafkaClient = require("../lib/kafka-client");
const { testConfig } = require("../config/kafka");

async function testTopicOperations() {
	console.log("üß™ Kafka Topic ƒ∞≈ülemleri Testi Ba≈ülatƒ±lƒ±yor...\n");

	const client = new KafkaClient();
	const testTopicName = `${testConfig.testTopic}-${Date.now()}`;

	try {
		// √ñnce baƒülantƒ±yƒ± test et
		console.log("1Ô∏è‚É£ Baƒülantƒ± kontrol√º...");
		const isConnected = await client.testConnection();

		if (!isConnected) {
			throw new Error("Kafka baƒülantƒ±sƒ± kurulamadƒ±");
		}

		// Mevcut topic listesini g√∂ster
		console.log("\n2Ô∏è‚É£ Mevcut topic listesi:");
		let topics = await client.listTopics();
		console.log(`üìã Toplam ${topics.length} topic bulundu`);
		topics.slice(0, 5).forEach((topic, index) => {
			console.log(`  ${index + 1}. ${topic}`);
		});
		if (topics.length > 5) {
			console.log(`  ... ve ${topics.length - 5} tane daha`);
		}

		// Yeni topic olu≈ütur
		console.log(`\n3Ô∏è‚É£ Yeni topic olu≈üturuluyor: ${testTopicName}`);
		await client.createTopic(testTopicName, 3, 1); // 3 partition, 1 replication

		// Topic listesini tekrar kontrol et
		console.log("\n4Ô∏è‚É£ Topic olu≈üturulduktan sonra liste:");
		topics = await client.listTopics();
		const isTopicCreated = topics.includes(testTopicName);

		if (isTopicCreated) {
			console.log(
				`‚úÖ Topic '${testTopicName}' ba≈üarƒ±yla olu≈üturuldu ve listede g√∂r√ºn√ºyor`
			);
		} else {
			console.log(
				`‚ö†Ô∏è Topic '${testTopicName}' olu≈üturuldu ama hen√ºz listede g√∂r√ºnm√ºyor`
			);
		}

		// Topic silmeyi test et
		console.log(`\n5Ô∏è‚É£ Test topic'i siliniyor: ${testTopicName}`);
		await client.deleteTopic(testTopicName);

		// Final kontrol
		console.log("\n6Ô∏è‚É£ Topic silindikten sonra son kontrol:");
		topics = await client.listTopics();
		const isTopicDeleted = !topics.includes(testTopicName);

		if (isTopicDeleted) {
			console.log(`‚úÖ Topic '${testTopicName}' ba≈üarƒ±yla silindi`);
		} else {
			console.log(`‚ö†Ô∏è Topic '${testTopicName}' hala listede g√∂r√ºn√ºyor`);
		}
	} catch (error) {
		console.error("üí• Topic testi sƒ±rasƒ±nda hata olu≈ütu:", error.message);

		// Hata durumunda da test topic'ini temizlemeye √ßalƒ±≈ü
		try {
			await client.deleteTopic(testTopicName);
			console.log(`üßπ Test topic '${testTopicName}' temizlendi`);
		} catch (cleanupError) {
			console.log(`‚ö†Ô∏è Test topic temizlenemedi: ${cleanupError.message}`);
		}

		process.exit(1);
	} finally {
		await client.disconnect();
	}

	console.log("\n‚úÖ Topic i≈ülemleri testi tamamlandƒ±!");
}

// Script direkt √ßalƒ±≈ütƒ±rƒ±lƒ±rsa testi ba≈ülat
if (require.main === module) {
	testTopicOperations().catch(console.error);
}

module.exports = testTopicOperations;
